
pkgname=chromium
pkgver=99.0.4844.84
pkgrel=0
pkgdesc="Chromium web browser"
url="https://www.chromium.org/Home"
arch="aarch64 x86_64"	# x86: ./v8_context_snapshot_generator segfaults
license="BSD-3-Clause"
makedepends="
	alsa-lib-dev
	bash
	bison flex
	bsd-compat-headers
	bzip2-dev
	cairo-dev
	clang-dev
	cups-dev
	curl-dev
	dbus-glib-dev
	elfutils
	elfutils-dev
	eudev-dev
	ffmpeg4-dev
	findutils
	flac-dev
	freetype-dev
	gnutls-dev
	gperf
	gtk+3.0-dev
	gzip
	harfbuzz-dev
	hunspell-dev
	hwids-usb
	jpeg-dev
	jsoncpp-dev
	krb5-dev
	lcms2-dev
	libbsd-dev
	libcap-dev
	libevent-dev
	libexif-dev
	libgcrypt-dev
	libgnome-keyring-dev
	libjpeg-turbo-dev
	libpng-dev
	libusb-dev
	libva-dev
	libwebp-dev
	libxcomposite-dev
	libxcursor-dev
	libxinerama-dev
	libxml2-dev
	libxrandr-dev
	libxscrnsaver-dev
	libxslt-dev
	linux-headers
	lld
	mesa-dev
	minizip-dev
	ninja
	nodejs
	nss-dev
	java-jdk
	opus-dev
	pciutils-dev
	perl
	pipewire-dev
	pulseaudio-dev
	python3
	re2-dev
	snappy-dev
	speex-dev
	sqlite-dev
	xcb-proto
	xdg-utils
	zlib-dev
	py3-setuptools
	"
# explicit depends for --headless
depends="xdg-utils eudev-libs gtk+3.0 ttf-opensans"
options="suid !check" # broken
subpackages="$pkgname-chromedriver $pkgname-lang $pkgname-swiftshader $pkgname-angle"
source="https://commondatastorage.googleapis.com/chromium-browser-official/chromium-$pkgver.tar.xz
	test_fonts-cd96fc55dc243f6c6f4cb63ad117cad6cd48dceb.tar.gz::https://chromium-fonts.storage.googleapis.com/cd96fc55dc243f6c6f4cb63ad117cad6cd48dceb
	chromium-launcher.sh
	chromium.conf
	chromium.desktop
	google-api.keys

	default-pthread-stacksize.patch
	musl-fixes.patch
	no-getcontext.patch
	musl-hacks.patch
	musl-libc++.patch
	musl-sandbox.patch
	no-execinfo.patch
	no-mallinfo.patch
	resolver.patch
	musl-stat.patch

	chromium-use-alpine-target.patch
	media-base.patch
	musl-crashpad.patch
	musl-v8-monotonic-pthread-cont_timedwait.patch
	nasm.patch

	gcc-arm.patch
	elf-arm.patch

	fix-narrowing-cast.patch
	use-deprecated-ffmpeg-api.patch

	fix-unittests-sandbox.patch

	chromium-revert-drop-of-system-java.patch
	scoped-file.patch
	remove-strip_binary.patch
	gdbinit.patch
	quiche-arena-size.patch

	revert-use-ffile-compilation-dir.patch
	chromium-VirtualCursor-standard-layout.patch
	unbundle-ffmpeg-av_stream_get_first_dts.patch

	system-libdrm.patch

	credentials-header.patch
	system-opus.patch
	memory-tagging-arm64.patch

	musl-tid-caching.patch
"

# secfixes:
#   99.0.4844.84-r0:
#     - CVE-2022-1096
#   98.0.4758.102-r0:
#     - CVE-2022-0452
#     - CVE-2022-0453
#     - CVE-2022-0454
#     - CVE-2022-0455
#     - CVE-2022-0456
#     - CVE-2022-0457
#     - CVE-2022-0458
#     - CVE-2022-0459
#     - CVE-2022-0460
#     - CVE-2022-0461
#     - CVE-2022-0462
#     - CVE-2022-0463
#     - CVE-2022-0464
#     - CVE-2022-0465
#     - CVE-2022-0466
#     - CVE-2022-0467
#     - CVE-2022-0468
#     - CVE-2022-0469
#     - CVE-2022-0470
#     - CVE-2022-0603
#     - CVE-2022-0604
#     - CVE-2022-0605
#     - CVE-2022-0606
#     - CVE-2022-0607
#     - CVE-2022-0608
#     - CVE-2022-0609
#     - CVE-2022-0610
#   93.0.4577.82-r0:
#     - CVE-2021-30625
#     - CVE-2021-30626
#     - CVE-2021-30627
#     - CVE-2021-30628
#     - CVE-2021-30629
#     - CVE-2021-30630
#     - CVE-2021-30631
#     - CVE-2021-30632
#     - CVE-2021-30633
#   93.0.4577.63-r0:
#     - CVE-2021-30606
#     - CVE-2021-30607
#     - CVE-2021-30608
#     - CVE-2021-30609
#     - CVE-2021-30610
#     - CVE-2021-30611
#     - CVE-2021-30612
#     - CVE-2021-30613
#     - CVE-2021-30614
#     - CVE-2021-30615
#     - CVE-2021-30616
#     - CVE-2021-30617
#     - CVE-2021-30618
#     - CVE-2021-30619
#     - CVE-2021-30620
#     - CVE-2021-30621
#     - CVE-2021-30622
#     - CVE-2021-30623
#     - CVE-2021-30624
#   92.0.4515.159-r0:
#     - CVE-2021-30598
#     - CVE-2021-30599
#     - CVE-2021-30600
#     - CVE-2021-30601
#     - CVE-2021-30602
#     - CVE-2021-30603
#     - CVE-2021-30604
#     - CVE-2021-30590
#     - CVE-2021-30591
#     - CVE-2021-30592
#     - CVE-2021-30593
#     - CVE-2021-30594
#     - CVE-2021-30596
#     - CVE-2021-30597
#   92.0.4515.107-r0:
#     - CVE-2021-30565
#     - CVE-2021-30566
#     - CVE-2021-30567
#     - CVE-2021-30568
#     - CVE-2021-30569
#     - CVE-2021-30571
#     - CVE-2021-30572
#     - CVE-2021-30573
#     - CVE-2021-30574
#     - CVE-2021-30575
#     - CVE-2021-30576
#     - CVE-2021-30577
#     - CVE-2021-30578
#     - CVE-2021-30579
#     - CVE-2021-30580
#     - CVE-2021-30581
#     - CVE-2021-30582
#     - CVE-2021-30583
#     - CVE-2021-30584
#     - CVE-2021-30585
#     - CVE-2021-30586
#     - CVE-2021-30587
#     - CVE-2021-30588
#     - CVE-2021-30589
#   91.0.4472.164-r0:
#     - CVE-2021-30559
#     - CVE-2021-30541
#     - CVE-2021-30560
#     - CVE-2021-30561
#     - CVE-2021-30562
#     - CVE-2021-30563
#     - CVE-2021-30564
#   91.0.4472.114-r0:
#     - CVE-2021-30554
#     - CVE-2021-30555
#     - CVE-2021-30556
#     - CVE-2021-30557
#   91.0.4472.101-r0:
#     - CVE-2021-30544
#     - CVE-2021-30545
#     - CVE-2021-30546
#     - CVE-2021-30547
#     - CVE-2021-30548
#     - CVE-2021-30549
#     - CVE-2021-30550
#     - CVE-2021-30551
#     - CVE-2021-30552
#     - CVE-2021-30553
#   91.0.4472.77-r0:
#     - CVE-2021-30521
#     - CVE-2021-30522
#     - CVE-2021-30523
#     - CVE-2021-30524
#     - CVE-2021-30525
#     - CVE-2021-30526
#     - CVE-2021-30527
#     - CVE-2021-30528
#     - CVE-2021-30529
#     - CVE-2021-30530
#     - CVE-2021-30531
#     - CVE-2021-30532
#     - CVE-2021-30533
#     - CVE-2021-30534
#     - CVE-2021-30535
#     - CVE-2021-30536
#     - CVE-2021-30537
#     - CVE-2021-30538
#     - CVE-2021-30539
#     - CVE-2021-30540
#   90.0.4430.72-r0:
#     - CVE-2021-21201
#     - CVE-2021-21202
#     - CVE-2021-21203
#     - CVE-2021-21204
#     - CVE-2021-21205
#     - CVE-2021-21221
#     - CVE-2021-21207
#     - CVE-2021-21208
#     - CVE-2021-21209
#     - CVE-2021-21210
#     - CVE-2021-21211
#     - CVE-2021-21212
#     - CVE-2021-21213
#     - CVE-2021-21214
#     - CVE-2021-21215
#     - CVE-2021-21216
#     - CVE-2021-21217
#     - CVE-2021-21218
#     - CVE-2021-21219
#   89.0.4389.128-r0:
#     - CVE-2021-21206
#     - CVE-2021-21220
#   89.0.4389.114-r0:
#     - CVE-2021-21194
#     - CVE-2021-21195
#     - CVE-2021-21196
#     - CVE-2021-21197
#     - CVE-2021-21198
#     - CVE-2021-21199
#   89.0.4389.90-r0:
#     - CVE-2021-21191
#     - CVE-2021-21192
#     - CVE-2021-21193
#   89.0.4389.72-r0:
#     - CVE-2021-21158
#     - CVE-2021-21159
#     - CVE-2021-21160
#     - CVE-2021-21161
#     - CVE-2021-21162
#     - CVE-2021-21163
#     - CVE-2021-21164
#     - CVE-2021-21165
#     - CVE-2021-21166
#     - CVE-2021-21167
#     - CVE-2021-21168
#     - CVE-2021-21169
#     - CVE-2021-21170
#     - CVE-2021-21171
#     - CVE-2021-21172
#     - CVE-2021-21173
#     - CVE-2021-21174
#     - CVE-2021-21175
#     - CVE-2021-21176
#     - CVE-2021-21177
#     - CVE-2021-21178
#     - CVE-2021-21179
#     - CVE-2021-21180
#     - CVE-2020-27844
#     - CVE-2021-21181
#     - CVE-2021-21182
#     - CVE-2021-21183
#     - CVE-2021-21184
#     - CVE-2021-21185
#     - CVE-2021-21186
#     - CVE-2021-21187
#     - CVE-2021-21188
#     - CVE-2021-21189
#     - CVE-2021-21190
#   83.0.4103.116-r0:
#     - CVE-2020-6505
#     - CVE-2020-6506
#     - CVE-2020-6507
#     - CVE-2020-6509
#   72.0.3626.121-r0:
#     - CVE-2019-5786

if [ -n "$CHECK" ]; then
	options="suid"
fi

_buildtype=Release
if [ -n "$DEBUG" ]; then
	_symbol_level=2
	subpackages="$subpackages $pkgname-dbg"
else
	_symbol_level=0
fi

upstream_version() {
	curl --silent https://omahaproxy.appspot.com/all \
		| awk -F, '$1 == "linux" && $2 == "stable" {print $3}'
}

prepare() {
	default_prepare

	cd "$srcdir"/"chromium-$pkgver"

	mv ../test_fonts/ ./third_party/test_fonts/

	# https://groups.google.com/a/chromium.org/d/topic/chromium-packagers/9JX1N2nf4PU/discussion
	touch chrome/test/data/webui/i18n_process_css_test.html
	# Use the file at run time instead of effectively compiling it in
	sed 's|//third_party/usb_ids/usb.ids|/usr/share/hwdata/usb.ids|g' \
		-i services/device/public/cpp/usb/BUILD.gn

	mkdir -p third_party/node/linux/node-linux-x64/bin
	ln -s /usr/bin/node third_party/node/linux/node-linux-x64/bin/

	# reusable system library settings
	local use_system="
		ffmpeg
		flac
		fontconfig
		freetype
		harfbuzz-ng
		libdrm
		libevent
		libjpeg
		libpng
		libwebp
		libxml
		libxslt
		opus
		re2
		snappy
		"
	for _lib in $use_system libjpeg_turbo; do
		msg "Removing buildscripts for system provided $_lib"
		find . -type f -path "*third_party/$_lib/*" \
			\! -path "*third_party/$_lib/chromium/*" \
			\! -path "*third_party/$_lib/google/*" \
			\! -path './base/third_party/icu/*' \
			\! -path './third_party/libxml/*' \
			\! -path './third_party/pdfium/third_party/freetype/include/pstables.h' \
			\! -path './third_party/harfbuzz-ng/utils/hb_scoped.h' \
			\! -regex '.*\.\(gn\|gni\|isolate\|py\)' \
			-delete
	done

	msg "Replacing gn files"
	python3 build/linux/unbundle/replace_gn_files.py --system-libraries \
		$use_system
	python3 third_party/libaddressinput/chromium/tools/update-strings.py

	# prevent annoying errors when regenerating gni
	sed -i 's,^update_readme$,#update_readme,' \
		third_party/libvpx/generate_gni.sh

	# allow system dependencies in "official builds"
	sed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
		tools/generate_shim_headers/generate_shim_headers.py
}

_gn_flags() {
	echo "$@"
}

build() {
	##############################################################
	# Please dont use these keys outside of Alpine Linux project #
	# You can create your own at:                                #
	# http://www.chromium.org/developers/how-tos/api-keys        #
	##############################################################
	local _google_api_key _google_default_client_id _google_default_client_secret
	eval "$(base64 -d < $srcdir/google-api.keys)"

	msg "Bootstrapping GN"

#	AR="ar" CC="${CC:-gcc}" CXX="${CXX:-g++}" LD="${CXX:-g++}" \
	# shellcheck disable=SC2097,SC2098
	CC="${CC:-clang}" CXX="${CXX:-clang++}" LD="${CXX:-clang++}" \
		python3 tools/gn/bootstrap/bootstrap.py -s -v --skip-generate-buildfiles

	msg "Configuring build"

	local _c _ca
	_c=$(_gn_flags \
		blink_symbol_level=$_symbol_level \
		build_with_tflite_lib=false \
		chrome_pgo_phase=0 \
		clang_use_chrome_plugins=false \
		custom_toolchain=\"//build/toolchain/linux/unbundle:default\" \
		disable_fieldtrial_testing_config=true \
		enable_hangout_services_extension=true \
		enable_nacl=false \
		enable_nacl_nonsfi=false \
		enable_precompiled_headers=false \
		enable_vr=false \
		fatal_linker_warnings=false \
		ffmpeg_branding=\"Chrome\" \
		gold_path=\"/usr/bin/ld.gold\" \
		google_api_key=\"$_google_api_key\" \
		google_default_client_id=\"$_google_default_client_id\" \
		google_default_client_secret=\"$_google_default_client_secret\" \
		host_toolchain=\"//build/toolchain/linux/unbundle:default\" \
		icu_use_data_file=true \
		is_cfi=false \
		is_clang=true \
		is_component_build=false \
		is_debug=false \
		is_official_build=true\
		link_pulseaudio=true \
		proprietary_codecs=true \
		rtc_use_pipewire=true \
		symbol_level=$_symbol_level \
		treat_warnings_as_errors=false \
		use_allocator=\"none\" \
		use_allocator_shim=false \
		use_cfi_icall=false \
		use_cups=true \
		use_custom_libcxx=false \
		use_gnome_keyring=false \
		use_gold=false \
		use_lld=true \
		use_pulseaudio=true \
		use_sysroot=false \
		use_system_freetype=true \
		use_system_harfbuzz=true \
		use_system_lcms2=true \
		use_system_libdrm=true \
		use_system_libjpeg=true \
		use_system_libpng=true \
		use_system_zlib=true \
		use_thin_lto=false \
	)

	case $CARCH in
		x86*|aarch64) _ca="use_vaapi=true" ;;
		*) _ca="concurrent_links=1" ;;
	esac

	AR="ar" CC="clang" CXX="clang++" LD="clang++" NM=/usr/bin/nm \
		out/Release/gn gen out/$_buildtype --args="$_c $_ca"

	# Make xcbgen available to ui/gfx/x/gen_xproto.py running under Python 2
	ln -sf /usr/lib/python3.*/site-packages/xcbgen .
	export PYTHONPATH="$PWD"

	msg "Ninja turtles GO!"

	# build mksnapshot
	ninja -C out/$_buildtype mksnapshot
	ninja -C out/$_buildtype v8_context_snapshot_generator

	if [ "$CARCH" = "x86" ]; then
		# x86 only - dependency issues compiling obj/chrome/browser/devtools/devtools/cast_handler.o
		ninja -C out/$_buildtype obj/chrome/common/media_router/mojom/media_router__generator.stamp
	fi

	# final link needs lots of file descriptors
	ulimit -n 2048

	# finish rest of the build
	ninja -C out/$_buildtype chrome chrome_sandbox chromedriver chrome_crashpad_handler

	if [ -n "$CHECK" ]; then
		ninja -C out/$_buildtype \
			base_unittests \
			base_util_unittests \
			sandbox_linux_unittests \
			chromedriver_unittests \
			crypto_unittests \
			skia_unittests \
			blink_common_unittests \
			ozone_unittests \
			ozone_x11_unittests \
			ozone_gl_unittests \
			absl_hardening_tests \
			# angle_unittests \
			blink_heap_unittests \
			# blink_platform_unittests \
			boringssl_crypto_tests \
			boringssl_ssl_tests \
			cast_unittests \
			capture_unittests \
			# components_browsertests \
			# components_unittests \
			# content_browsertests \
			# content_unittests \
			# crashpad_tests \
			events_unittests \
			gcm_unit_tests \
			gin_unittests \
			google_apis_unittests \
			gpu_unittests \
			gwp_asan_unittests \
			ipc_tests \
			jingle_unittests \
			latency_unittests \
			libjingle_xmpp_unittests \
			liburlpattern_unittests \
			media_blink_unittests \
			media_unittests \
			midi_unittests \
			mojo_unittests \
			net_unittests \
			# cc_unittests \
			# blink_unittests \
			perfetto_unittests \
			# services_unittests \
			shell_dialogs_unittests \
			sql_unittests \
			storage_unittests \
			ui_base_unittests \
			ui_touch_selection_unittests \
			url_unittests \
			# webkit_unit_tests \
			wtf_unittests \
			zlib_unittests
	fi
}

check() {
	out/$_buildtype/base_unittests
	out/$_buildtype/base_util_unittests
	out/$_buildtype/sandbox_linux_unittests # broken + does not compile
	out/$_buildtype/chromedriver_unittests
	out/$_buildtype/crypto_unittests
	out/$_buildtype/skia_unittests
	out/$_buildtype/ozone_unittests
	out/$_buildtype/ozone_x11_unittests # ?
	out/$_buildtype/ozone_gl_unittests # broken
	out/$_buildtype/absl_hardening_tests
	# out/$_buildtype/angle_unittests # broken / does not compile
	out/$_buildtype/blink_common_unittests
	out/$_buildtype/blink_heap_unittests
	# out/$_buildtype/blink_platform_unittests # broken / does not compile
	out/$_buildtype/boringssl_crypto_tests
	out/$_buildtype/boringssl_ssl_tests
	out/$_buildtype/cast_unittests
	out/$_buildtype/capture_unittests --gtest_filter=-*UsingRealWebcam* # broken
	# out/$_buildtype/components_browsertests # broken / does not compile
	# out/$_buildtype/components_unittests # broken / does not compile
	# out/$_buildtype/content_browsertests # broken / does not compile
	# out/$_buildtype/content_unittests # broken / does not compile
	# out/$_buildtype/crashpad_tests # broken / does not compile
	out/$_buildtype/events_unittests
	out/$_buildtype/gcm_unit_tests
	out/$_buildtype/gin_unittests # ?
	out/$_buildtype/google_apis_unittests
	out/$_buildtype/gpu_unittests
	out/$_buildtype/gwp_asan_unittests # broken / required?
	out/$_buildtype/ipc_tests
	out/$_buildtype/jingle_unittests
	out/$_buildtype/latency_unittests
	out/$_buildtype/libjingle_xmpp_unittests
	out/$_buildtype/liburlpattern_unittests
	out/$_buildtype/media_blink_unittests # broken
	out/$_buildtype/media_unittests # broken
	out/$_buildtype/midi_unittests
	out/$_buildtype/mojo_unittests
	out/$_buildtype/net_unittests # broken
	# out/$_buildtype/cc_unittests # broken / does not compile
	# out/$_buildtype/blink_unittests # broken / does not compile
	out/$_buildtype/perfetto_unittests # ?
	# out/$_buildtype/services_unittests # broken / does not compile
	out/$_buildtype/shell_dialogs_unittests
	out/$_buildtype/sql_unittests
	out/$_buildtype/storage_unittests
	out/$_buildtype/ui_base_unittests # ok
	out/$_buildtype/ui_touch_selection_unittests
	out/$_buildtype/url_unittests
	# out/$_buildtype/webkit_unit_tests # broken / does not compile
	out/$_buildtype/wtf_unittests
	out/$_buildtype/zlib_unittests
}

package() {
	cd "$builddir"/out/$_buildtype

	# binaries
	install -Dm755 chrome "$pkgdir"/usr/lib/$pkgname/chrome
	install -Dm4755 chrome_sandbox "$pkgdir"/usr/lib/$pkgname/chrome-sandbox
	install -Dm755 chrome_crashpad_handler "$pkgdir"/usr/lib/$pkgname/chrome_crashpad_handler

	# resources
	install -Dm644 snapshot_blob.bin "$pkgdir"/usr/lib/$pkgname/
	install -Dm644 v8_context_snapshot.bin "$pkgdir"/usr/lib/$pkgname/

	install -m644 icudtl.dat "$pkgdir"/usr/lib/$pkgname/icudtl.dat

	install -Dm755 xdg-mime "$pkgdir"/usr/lib/$pkgname/xdg-mime
	install -Dm755 xdg-settings "$pkgdir"/usr/lib/$pkgname/xdg-settings

	# Vulkan
	install -Dm755 libvulkan.so.1 "$pkgdir"/usr/lib/$pkgname/libvulkan.so.1

	# Angle
	install -Dm755 libEGL.so "$pkgdir"/usr/lib/$pkgname/libEGL.so
	install -Dm755 libGLESv2.so "$pkgdir"/usr/lib/$pkgname/libGLESv2.so

	local pak
	for pak in *.pak; do
		install -Dm644 $pak "$pkgdir"/usr/lib/$pkgname/$pak
	done

	install -Dm755 "$srcdir"/chromium-launcher.sh \
		"$pkgdir"/usr/lib/$pkgname/chromium-launcher.sh

	cp -a MEIPreload "$pkgdir"/usr/lib/$pkgname/

	# Default to en-us and provide everything else through the chromium-lang package
	install -Dm644 locales/en-US.pak "$pkgdir"/usr/lib/$pkgname/locales/en-US.pak

	# It is important that we name the target "chromium-browser",
	# xdg-utils expect it; bug #355517.
	mkdir -p "$pkgdir"/usr/bin
	ln -sf /usr/lib/$pkgname/chromium-launcher.sh "$pkgdir"/usr/bin/chromium-browser

	install -Dm644 "$srcdir"/chromium.conf \
		"$pkgdir"/etc/chromium/chromium.conf

	install -Dm644 "$srcdir"/chromium.desktop \
		"$pkgdir"/usr/share/applications/chromium.desktop

	cd "$builddir"
	for size in 24 48 64 128 256; do
		install -Dm644 "chrome/app/theme/chromium/product_logo_$size.png" \
			"$pkgdir/usr/share/icons/hicolor/${size}x$size/apps/chromium.png"
	done

	for size in 16 32; do
		install -Dm644 "chrome/app/theme/default_100_percent/chromium/product_logo_$size.png" \
			"$pkgdir/usr/share/icons/hicolor/${size}x$size/apps/chromium.png"
	done
}

chromedriver() {
	pkgdesc="WebDriver driver for the Chromium Browser"
	depends="$pkgname=$pkgver-r$pkgrel"

	cd "$builddir"/out/$_buildtype

	mkdir -p "$subpkgdir"/usr/lib/$pkgname "$subpkgdir"/usr/bin

	install -Dm755 chromedriver "$subpkgdir"/usr/lib/$pkgname/chromedriver
	ln -sf /usr/lib/$pkgname/chromedriver "$subpkgdir"/usr/bin/
}

lang() {
	pkgdesc="Languages for package $pkgname"
	install_if="$pkgname=$pkgver-r$pkgrel lang"

	cd "$builddir"/out/$_buildtype

	for pak in locales/*.pak; do
		install -Dm644 "$pak" "$subpkgdir"/usr/lib/$pkgname/"$pak"
	done;

	rm "$subpkgdir"/usr/lib/$pkgname/locales/en-US.pak
}

swiftshader() {
	pkgdesc="Chromium web browser: CPU-based implementation of the Vulkan graphics API"
	depends="$pkgname-angle=$pkgver-r$pkgrel"

	cd "$builddir"/out/$_buildtype

	install -Dm755 swiftshader/libEGL.so \
		"$subpkgdir"/usr/lib/$pkgname/swiftshader/libEGL.so
	install -Dm755 swiftshader/libGLESv2.so \
		"$subpkgdir"/usr/lib/$pkgname/swiftshader/libGLESv2.so
	install -Dm755 libvk_swiftshader.so \
		"$subpkgdir"/usr/lib/$pkgname/libvk_swiftshader.so
	install -Dm755 vk_swiftshader_icd.json \
		"$subpkgdir"/usr/lib/$pkgname/vk_swiftshader_icd.json
}

angle() {
	pkgdesc="Chromium web browser: ANGLE based hardware acceleration"
	depends=""

	mkdir -p "$subpkgdir"
}

sha512sums="
7d8bd7e03fc3c8f546f4b9d49fd0191a9b174f1eea4ea53673e0337dbe985ee56b31de132bf0b228ca741416f9b6aa707ee182021fc65df37b193aab75ab05cc  chromium-99.0.4844.84.tar.xz
f554ccc5d8a5c066634357878c89944cc591809ea6f6c6ef5b35e970e9674e0b3be8fddb06c0d333ddc65211fa09ae5e0b4b483ca70048156c29607c5487c017  test_fonts-cd96fc55dc243f6c6f4cb63ad117cad6cd48dceb.tar.gz
b9a810416dd7a8ffc3a5ced85ad9acebda1665bd08a57eec7b189698cc5f74d2c3fd69044e20fcb83297a43214b2772a1312b2c6122ea0eb716abacf39524d60  chromium-launcher.sh
f6d962b9e4c22dd42183df3db5d3202dab33eccecafb1bf63ca678147289581262db1e5e64cbe8f9c212beefb0a6717bb8d311e497f56b55fe95b8bab2db493f  chromium.conf
e182c998a43d22d1c76a86c561619afd1fca8c2be668265ad5e2f81a3806f7a154272cc027a2f8b370fb69446892c69e5967a4be76082325c14245ee7915234c  chromium.desktop
2d8237a940ea691bd10b08315429677a587f7ef9692a0cca53bfd066eae82998a6c71f402a8669e9de39f94d7f3280745d1628ea6eac5d76ca7116844d4e0dac  google-api.keys
22da17c649ae9845d6a174187f2b666245a10db8a997169fc214c430fbba10143cfb57f8f6ece5acf856cd9ea09f293a1aca90cdf3e64fd9423b78beac53f517  default-pthread-stacksize.patch
bfeeec6ed1baeb1bb9f9a13fd5ea79e5c94bab2826a88e5f3fab4eba1cd67feef527609e1a6af9c86a7bdac1b5e15f35a8ca110f6e8e29600eccd4bcc0a96694  musl-fixes.patch
e8675aff9fccd8b58cc839ef1d9e0e022d66aa94f72baa72e7acf92ceb2691f6a7907cc60ec3a87f894efdd639a3dec7fe702c97d446fcdea99452caec57e002  no-getcontext.patch
20b6931937ae792ddf4e1be7f0cbf0f0931b0afce9f6528b7ae5edb1bb2db070438caa8edc94e915e1e5ab1a191789129877d0353fe8976f537df3775dd3ab5d  musl-hacks.patch
a361989c7ff4a285ed36c499e4fe1e97ed8d904a9b92f8d3c01b056b469490b7d215b6edb803ba3b0955633f58f3682d4fb60cc710cba68153a6b23df3ba7ba9  musl-libc++.patch
ef43fa90b05e2407b6daa822193121cdeef6ee9068175572f0928f156f186be9c77539dfa06863adfaa25afd498ec1b5081f9e476543616f9472b9033fd921dc  musl-sandbox.patch
7aa351e79c29de63972f1f16fbab0465b2569bc0a22174780988e0cdfe4fcaff3c664dd277937bb33f2b77f108d20afa8720c427524b09d26074f9cf6807e147  no-execinfo.patch
0eee314ec2d47960640f4e3877ce333cef8c55b6995a88e5d1c879a8a945a959bd1256d17ce0d6c42036618ee0a44300d659aa6bd0fa47f590958f4a018a707b  no-mallinfo.patch
cd7719c30518aeb659e9b7dc126241f897afe1a231e601271b63ba170e811a93b514c4d2a77680cdf0c846f81fa6db766ac619aa200efb32cbdfff6732a63893  resolver.patch
0c0d3ed0a8f2bcecb2bf4eb56130fcd71031bb63744fb56e1b5a6b9dfbe16680607ff592e24602fe045b819509a70556e240b6fe0e876710977d60185f682df4  musl-stat.patch
ded02360a36283973b9abb4150de3d964749a58017fbbd9f09fb6cb29ec97a8ac99ccadd953633bbb7eb9ec77a078f4df9de5f624d1580f33446ceba5fd3a3f6  chromium-use-alpine-target.patch
599f5ef338b5797e04436bdc88921c31365d2dea2613d40053be6e774f654e2889efb0c0bd55c2c5044a6805510fbc337da555971169a75d584fac93e18256ac  media-base.patch
2e5a83826239849d096aead033eb519338b84e6fbbf58abfcd7cfe40d0b3070b66bcc825ec84406484d73d1a333f1b9d23a8ab44987ab5c8b187076c84cd668b  musl-crashpad.patch
556cc2ba28184a75745f13c673605327f5be590be179eb3f941dc0abded854a814e5da1432a28fb8d4dcdcd66ffd4c94ee1a8824d2cd93b632f48e9310dbc3fa  musl-v8-monotonic-pthread-cont_timedwait.patch
7957aae04e8ef3badbc98c982ba1acb1b9ef5e665440116c704512f11554d7b64ba3643b7ff7d00476a6686324033b0cf762deb78ce798619226380953b9dc9c  nasm.patch
ad4ddc25df7aa1de2038b7adb86d27679ecdb7e3e16c0eec994e947a08c41504b6fb41166f7868ff5f58ce8191c78800cbb91d259c864840fa5af1d7ba5d43a1  gcc-arm.patch
9b1441fe42421ef9ead86a5143bf997d989bd53a8969cdfdf4e0c45f847efc8c1d127e15fb05e2ef5dbefbb228cbdc2849404d74997ca56265599e12e5efd6e4  elf-arm.patch
e60f381c557a15598d71e33b7aacc63be4a8e17b16cdd95047df5e5e9577ad925864ffd64597d5dbc9a4516de13b3f17c26099b36692165df8c66b1b4d399ce9  fix-narrowing-cast.patch
ce562436249c4caf275c59aaa4e19ac910af26d11e7e053c6fe281ddd2ad9e1f1046e2a5be9567f8880d6901879bc86a61145cf1cc604816f5e1f9afb851577c  use-deprecated-ffmpeg-api.patch
54f07ee9d85577e284e04460e79132fa6769251ceb045561cea811dde0369e9e4cdbcf26566235b0d12c649be4d46fea294f7c6a4e2a75109dc3282e6e7d7993  fix-unittests-sandbox.patch
c4654d5b23c6f5d9502507e534fe1951d6749c62251e49b6adfe10d1569431e7f7a5a6fa5ff09ec30984415ced27a5e20985df8c91295de34af3c84557fa5b91  chromium-revert-drop-of-system-java.patch
8d11b2ba811fdd6280784bfafcef073238324941b4c33e7c9a5ccfde8506242d06e5136d697f047bab3838b43a666f1da404af7b4f4ff9a0c6bf6bdb8448e5b2  scoped-file.patch
91dafba2138175b6618ec4c96c7ea39f3a26f6a09b69adabad4f9355dd84d436f3de3274b31465d5f46deeb452fde64e4cfbbda0bb4ed7e9a25d953e1b73e5d2  remove-strip_binary.patch
82f2bd4aa613e792d3af6e7a8632e0920cf48504a7572fb97d5480ea182fa125fe526e7df1ce4311b5d139a3f78da0f0b54605fbd09d7cd43135906a7639e47f  gdbinit.patch
ad10d3ac758b43caf034791ea50e4588f4979a07a9c4f71763d4987750db261f22cccb30279899878b14e8c9b9aef66fd81f1686e7198768db7513e340aa65ee  quiche-arena-size.patch
2fdd0b2fd403dd4440533288f7e08bb8480702c42c7571ea764aac18ba5eaf72494793c77e4244991d12f45e5acfceae0772995b11d323916c07cb53c43a2f59  revert-use-ffile-compilation-dir.patch
0fc131ef4ad32964815744080f40cc2566c70da1cd4ddaf1da8456d1c86e67e3ebf38f43208d17d40b646744e8e662f5b314e236a1c90bc6f8b936313e42a3cf  chromium-VirtualCursor-standard-layout.patch
4d184faf083a82e2a51480b8513b14c81a8d03a821fd25bd41523093e064bc2ced8e23fdc37da548d9e1e171784263436b82be373aa7307b4da41ee8b3b26a89  unbundle-ffmpeg-av_stream_get_first_dts.patch
03f48b837e602f0da49374e2d888b0d55de8de4ab39585a6bb66fa62b8be9e3547c709e97b7fc7c4248e24bec133b7d4afc83600a450797e808809407b6e996c  system-libdrm.patch
274858323d040ac8c51bac90b6ef91bb075d7b8d92d73952ed700c10a8bae2c2115fb2a9cc6912de79be226c141d7106839fc3486e22c0206e75cb6d8ff65ee6  credentials-header.patch
5eb47e4b13ef925541d3eb5aa121b639ed014d66c27ef12093335df1c9101d99776a9ddb761991c2ac3d6c9b13932ed42410c38d6c8d537001d1a98c32ec86c8  system-opus.patch
fc75545c1f3c20b7186a28b267cee7fb9209d6b3b9d6e8e60b14f8f2ff7303526ff7ed9d21f47be2434845268d27203b8bf7b63a39d505baa8f6713b107dbe26  memory-tagging-arm64.patch
a018cf58b9e34f73d588961f2f9a36de67267060fb2e77ebc562974c6c92a59009161e374cf9bbdc35e8bf1a7e90f0b90117a0d494dcd2e2bb2f5e6534925d0b  musl-tid-caching.patch
"
